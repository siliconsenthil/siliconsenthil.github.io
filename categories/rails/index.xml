<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>rails on siliconsenthil</title><link>https://siliconsenthil.in/categories/rails/</link><description>Recent content in rails on siliconsenthil</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Wed, 02 Apr 2014 18:50:00 +0530</lastBuildDate><atom:link href="https://siliconsenthil.in/categories/rails/index.xml" rel="self" type="application/rss+xml"/><item><title>VCR - Match body</title><link>https://siliconsenthil.in/blog/2014-04-02-vcr-match-body/</link><pubDate>Wed, 02 Apr 2014 18:50:00 +0530</pubDate><guid>https://siliconsenthil.in/blog/2014-04-02-vcr-match-body/</guid><description>We had to have make external API calls and we used vcr to record and replay in our integration tests. All was going on well.
Despite this coverage, we saw our code breaking in production due to small chages in request xml body. We wanted our integration spec to cover these too. By default, vcr matches request method and url. We wanted it to match the post body too. Simple match by body does not solve as it does plain string match.</description></item><item><title>Memory leaks with &lt;i>validation_scopes&lt;/i></title><link>https://siliconsenthil.in/blog/2013-01-19-validation-scopes-leaks-memory/</link><pubDate>Sat, 19 Jan 2013 17:50:00 +0530</pubDate><guid>https://siliconsenthil.in/blog/2013-01-19-validation-scopes-leaks-memory/</guid><description>&lt;p>We had a requirement in our app to ignore few validations by just showing warnings to user and continuing the object to save.
The gem &lt;a href="https://github.com/gtd/validation_scopes">&lt;em>validation_scopes&lt;/em>&lt;/a> seemed to be a right choice and we used it.&lt;/p>
&lt;p>We faced memory issues and &lt;a href="https://siliconsenthil.in/blog/2013/01/19/how-we-debugged-rails-memory-leak/">figured out&lt;/a>
&lt;code>model.has_warnings?&lt;/code> of &lt;em>validation_scopes&lt;/em> was causing issue.&lt;/p></description></item><item><title>How we debugged memory leak in a rails app.</title><link>https://siliconsenthil.in/blog/2013-01-19-how-we-debugged-rails-memory-leak/</link><pubDate>Sat, 19 Jan 2013 13:29:00 +0530</pubDate><guid>https://siliconsenthil.in/blog/2013-01-19-how-we-debugged-rails-memory-leak/</guid><description>&lt;p>We run our app on heroku and kept on getting &lt;a href="https://devcenter.heroku.com/articles/error-codes#r14-memory-quota-exceeded">R14&lt;/a>s. Our google and stackoverflow skills did provide
few suggestions and but din&amp;rsquo;t help much. We used few tools (&lt;a href="https://github.com/brynary/rack-bug">rack_bug&lt;/a>, &lt;a href="https://github.com/noahd1/oink">oink&lt;/a>) see the memory usage. They provided who use how much&lt;br>
but we could make further progress with that. So here&amp;rsquo;s what we did to find out.&lt;/p></description></item></channel></rss>