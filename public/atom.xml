<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[siliconsenthil.in]]></title>
  <link href="http://siliconsenthil.herokuapp.com/atom.xml" rel="self"/>
  <link href="http://siliconsenthil.herokuapp.com/"/>
  <updated>2013-02-15T16:45:30+05:30</updated>
  <id>http://siliconsenthil.herokuapp.com/</id>
  <author>
    <name><![CDATA[Senthil V S]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Iteration, Recursion and Tail recursion]]></title>
    <link href="http://siliconsenthil.herokuapp.com/blog/2013/02/15/iteration-recursion-and-tail-recursion/"/>
    <updated>2013-02-15T12:38:00+05:30</updated>
    <id>http://siliconsenthil.herokuapp.com/blog/2013/02/15/iteration-recursion-and-tail-recursion</id>
    <content type="html"><![CDATA[<p><strong>Problem:</strong> Given <em>a</em> and <em>b</em>,<br/>find the sum of range of numbers between <em>a</em> and <em>b</em>.<br>E.g. Given 1 and 4, the result is 10 (1+2+3+4). Simple.</p>

<p><strong>Language:</strong> Scala</p>

<p>Let&#8217;s do this with programmers&#8217; favorite, Iteration</p>

<!--more-->




<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"></pre></td><td class='code'><pre><code class='scala'><span class='line'><span class="k">def</span> <span class="n">iterative_sum</span><span class="o">(</span><span class="n">a</span><span class="k">:</span> <span class="kt">Long</span><span class="o">,</span> <span class="n">b</span><span class="k">:</span> <span class="kt">Long</span><span class="o">)</span><span class="k">:</span><span class="kt">Long</span> <span class="o">=</span>  <span class="o">{</span>
</span><span class='line'>  <span class="k">var</span> <span class="n">result</span> <span class="k">=</span> <span class="mi">0L</span><span class="o">;</span>
</span><span class='line'>  <span class="k">for</span><span class="o">(</span><span class="n">i</span> <span class="k">&lt;-</span> <span class="n">a</span> <span class="n">until</span> <span class="n">b</span><span class="o">){</span><span class="n">result</span><span class="k">=</span><span class="n">result</span><span class="o">+</span><span class="n">i</span><span class="o">}</span>
</span><span class='line'>  <span class="k">return</span> <span class="n">result</span><span class="o">+</span><span class="n">b</span><span class="o">;</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>If we had to do this with recursion,</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"></pre></td><td class='code'><pre><code class='scala'><span class='line'><span class="k">def</span> <span class="n">sum</span><span class="o">(</span><span class="n">a</span><span class="k">:</span> <span class="kt">Long</span><span class="o">,</span> <span class="n">b</span><span class="k">:</span> <span class="kt">Long</span><span class="o">)</span><span class="k">:</span> <span class="kt">Long</span> <span class="o">=</span> <span class="k">if</span><span class="o">(</span><span class="n">a</span> <span class="o">&gt;</span> <span class="n">b</span><span class="o">)</span> <span class="mi">0</span> <span class="k">else</span> <span class="n">a</span> <span class="o">+</span> <span class="n">sum</span><span class="o">(</span><span class="n">a</span><span class="o">+</span><span class="mi">1</span><span class="o">,</span> <span class="n">b</span><span class="o">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>This works for smaller values. There&#8217;s a problem with this for bigger values because the way it&#8217;s implemented. If we see how it works, it would be obvious to figure that out. Assume the red grid as a limited size stack.</p>

<p><img src="http://i50.tinypic.com/1218htk.png" width="410"></p>

<p>It keeps putting expressions to stack till it could evaluate to a value.
Now, you can it throws <em>StackOverflowError</em> for larger input.</p>

<p><img src="http://i45.tinypic.com/2mw8ry1.png" width="410"></p>

<p>This is the problem with recursion. This might be one reason programmers tend to avoid recursion as it might not be obvious to guess when it fails.</p>

<p>If we could write a recursion function that does not force to use stack then we can avoid this error. And that is called as tail recursion. The way is that the last line of the recursion function should be just the recursion and not somthing else to do with the result.</p>

<p>With the help of nested function construct in scala, we could write something like this. Here <code>loop(a,0)</code> is the recusion call. As you can see this is the only expression, it does not require stack to store intermediate result.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"></pre></td><td class='code'><pre><code class='scala'><span class='line'><span class="k">def</span> <span class="n">tail_sum</span><span class="o">(</span><span class="n">a</span><span class="k">:</span> <span class="kt">Long</span><span class="o">,</span> <span class="n">b</span><span class="k">:</span> <span class="kt">Long</span><span class="o">)</span><span class="k">:</span> <span class="kt">Long</span> <span class="o">={</span>
</span><span class='line'>  <span class="k">def</span> <span class="n">loop</span><span class="o">(</span><span class="n">a</span><span class="k">:</span> <span class="kt">Long</span><span class="o">,</span> <span class="n">acc</span><span class="k">:</span> <span class="kt">Long</span><span class="o">)</span><span class="k">:</span> <span class="kt">Long</span> <span class="o">=</span> <span class="o">{</span>
</span><span class='line'>    <span class="k">if</span><span class="o">(</span><span class="n">a</span> <span class="o">&gt;</span> <span class="n">b</span><span class="o">)</span> <span class="n">acc</span>
</span><span class='line'>    <span class="k">else</span> <span class="n">loop</span><span class="o">(</span><span class="n">a</span><span class="o">+</span><span class="mi">1</span><span class="o">,</span> <span class="n">acc</span><span class="o">+</span><span class="n">a</span><span class="o">)</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'>  <span class="n">loop</span><span class="o">(</span><span class="n">a</span><span class="o">,</span> <span class="mi">0</span><span class="o">)</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>I tried the above all in for a large value (>6998 in my mac) saw recursion failing while iteration and tail recursion are able to return result.</p>

<div><script src='https://gist.github.com/4959395.js?file=IterationRecursionTailRecursion.scala'></script>
<noscript><pre><code>object RecursionVsTailRecursion extends App {
  
    def iterative_sum(a: Long, b: Long):Long =  {
      var result = 0L;
      for(i &lt;- a until b){result=result+i}
      return result+b;
    }
  
    def sum(a: Long, b: Long): Long = if(a &gt; b) 0 else a + sum(a+1, b)
    
    def tail_sum(a: Long, b: Long): Long ={
      def loop(a: Long, acc: Long): Long = {
        if(a &gt; b) acc
        else loop(a+1, acc+a)
      }
      loop(a, 0)
    } 
      
            
    val last = 6998
    println(iterative_sum(1, last))
    println(tail_sum(1, last))
    println(sum(1,last))

}</code></pre></noscript></div>



]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Memory leaks with <i>validation_scopes</i>]]></title>
    <link href="http://siliconsenthil.herokuapp.com/blog/2013/01/19/validation-scopes-leaks-memory/"/>
    <updated>2013-01-19T17:50:00+05:30</updated>
    <id>http://siliconsenthil.herokuapp.com/blog/2013/01/19/validation-scopes-leaks-memory</id>
    <content type="html"><![CDATA[<p>We had a requirement in our app to ignore few validations by just showing warnings to user and continuing the object to save.
The gem <a href="https://github.com/gtd/validation_scopes"><em>validation_scopes</em></a> seemed to be a right choice and we used it.</p>

<p>We faced memory issues and <a href="http://siliconsenthil.herokuapp.com/blog/2013/01/19/how-we-debugged-rails-memory-leak/">figured out</a>
<code>model.has_warnings?</code> of <em>validation_scopes</em> was causing issue.</p>

<!--more-->


<p>Let&#8217;s take a rails model class <em>Employee</em></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"></pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">Employee</span> <span class="o">&lt;</span> <span class="ss">ActiveRecord</span><span class="p">:</span><span class="ss">:Base</span>
</span><span class='line'>  <span class="n">attr_accessible</span> <span class="ss">:address</span><span class="p">,</span> <span class="ss">:age</span><span class="p">,</span> <span class="ss">:name</span>
</span><span class='line'>  <span class="n">validates_presence_of</span> <span class="ss">:name</span>
</span><span class='line'>  <span class="n">validation_scope</span> <span class="ss">:warnings</span> <span class="k">do</span> <span class="o">|</span><span class="n">s</span><span class="o">|</span>
</span><span class='line'>    <span class="n">s</span><span class="o">.</span><span class="n">validates_presence_of</span> <span class="ss">:address</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"></pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="mi">1</span><span class="o">.</span><span class="mi">9</span><span class="o">.</span><span class="mi">3</span><span class="n">p194</span> <span class="p">:</span><span class="mo">001</span> <span class="o">&gt;</span> <span class="n">e</span> <span class="o">=</span> <span class="no">Employee</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="ss">:name</span> <span class="o">=&gt;</span> <span class="s1">&#39;Senthil V S&#39;</span><span class="p">)</span>
</span><span class='line'> <span class="o">=&gt;</span> <span class="c1">#&lt;Employee id: nil, name: &quot;Senthil V S&quot;, age: nil, address: nil, created_at: nil, updated_at: nil&gt;</span>
</span><span class='line'><span class="mi">1</span><span class="o">.</span><span class="mi">9</span><span class="o">.</span><span class="mi">3</span><span class="n">p194</span> <span class="p">:</span><span class="mo">002</span> <span class="o">&gt;</span> <span class="n">e</span><span class="o">.</span><span class="n">valid?</span>
</span><span class='line'> <span class="o">=&gt;</span> <span class="kp">true</span>
</span><span class='line'><span class="mi">1</span><span class="o">.</span><span class="mi">9</span><span class="o">.</span><span class="mi">3</span><span class="n">p194</span> <span class="p">:</span><span class="mo">003</span> <span class="o">&gt;</span> <span class="n">e</span><span class="o">.</span><span class="n">instance_variables</span>
</span><span class='line'> <span class="o">=&gt;</span> <span class="o">[</span><span class="ss">:@attributes</span><span class="p">,</span> <span class="ss">:@association_cache</span><span class="p">,</span> <span class="ss">:@aggregation_cache</span><span class="p">,</span> <span class="ss">:@attributes_cache</span><span class="p">,</span>
</span><span class='line'> <span class="ss">:@new_record</span><span class="p">,</span> <span class="ss">:@readonly</span><span class="p">,</span> <span class="ss">:@destroyed</span><span class="p">,</span> <span class="ss">:@marked_for_destruction</span><span class="p">,</span> <span class="ss">:@previously_changed</span><span class="p">,</span>
</span><span class='line'> <span class="ss">:@changed_attributes</span><span class="p">,</span> <span class="ss">:@mass_assignment_options</span><span class="p">,</span> <span class="ss">:@validation_context</span><span class="p">,</span> <span class="ss">:@errors</span><span class="o">]</span>
</span></code></pre></td></tr></table></div></figure>


<p>No problem till now. Now I call <code>has_warnings?</code> on this object.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"></pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="mi">1</span><span class="o">.</span><span class="mi">9</span><span class="o">.</span><span class="mi">3</span><span class="n">p194</span> <span class="p">:</span><span class="mo">004</span> <span class="o">&gt;</span> <span class="n">e</span><span class="o">.</span><span class="n">has_warnings?</span>
</span><span class='line'> <span class="o">=&gt;</span> <span class="kp">true</span>
</span><span class='line'><span class="mi">1</span><span class="o">.</span><span class="mi">9</span><span class="o">.</span><span class="mi">3</span><span class="n">p194</span> <span class="p">:</span><span class="mo">005</span> <span class="o">&gt;</span> <span class="n">e</span><span class="o">.</span><span class="n">instance_variables</span>
</span><span class='line'> <span class="o">=&gt;</span> <span class="o">[</span><span class="ss">:@attributes</span><span class="p">,</span> <span class="ss">:@association_cache</span><span class="p">,</span> <span class="ss">:@aggregation_cache</span><span class="p">,</span> <span class="ss">:@attributes_cache</span><span class="p">,</span>
</span><span class='line'> <span class="ss">:@new_record</span><span class="p">,</span> <span class="ss">:@readonly</span><span class="p">,</span> <span class="ss">:@destroyed</span><span class="p">,</span> <span class="ss">:@marked_for_destruction</span><span class="p">,</span> <span class="ss">:@previously_changed</span><span class="p">,</span>
</span><span class='line'> <span class="ss">:@changed_attributes</span><span class="p">,</span> <span class="ss">:@mass_assignment_options</span><span class="p">,</span> <span class="ss">:@validation_context</span><span class="p">,</span> <span class="ss">:@errors</span><span class="p">,</span> <span class="ss">:@warnings</span><span class="o">]</span>
</span></code></pre></td></tr></table></div></figure>


<p>Notice a new instance variable(<code>@warnings</code>)gets set. Let&#8217;s see what it has.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"></pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="mi">1</span><span class="o">.</span><span class="mi">9</span><span class="o">.</span><span class="mi">3</span><span class="n">p194</span> <span class="p">:</span><span class="mo">034</span> <span class="o">&gt;</span> <span class="n">warning_object</span> <span class="o">=</span> <span class="n">e</span><span class="o">.</span><span class="n">instance_variable_get</span> <span class="ss">:@warnings</span>
</span><span class='line'> <span class="o">=&gt;</span> <span class="c1">#&lt;Employee id: nil, name: &quot;Senthil V S&quot;, age: nil, address: nil, created_at: nil, updated_at: nil&gt; </span>
</span><span class='line'><span class="mi">1</span><span class="o">.</span><span class="mi">9</span><span class="o">.</span><span class="mi">3</span><span class="n">p194</span> <span class="p">:</span><span class="mo">035</span> <span class="o">&gt;</span> <span class="n">warning_object</span><span class="o">.</span><span class="n">class</span>
</span><span class='line'> <span class="o">=&gt;</span> <span class="c1">#&lt;Class:0x007ffeddb0c1e0&gt;</span>
</span><span class='line'><span class="mi">1</span><span class="o">.</span><span class="mi">9</span><span class="o">.</span><span class="mi">3</span><span class="n">p194</span> <span class="p">:</span><span class="mo">036</span> <span class="o">&gt;</span> <span class="n">warning_object</span><span class="o">.</span><span class="n">class</span><span class="o">.</span><span class="n">ancestors</span>
</span><span class='line'> <span class="o">=&gt;</span> <span class="o">[</span><span class="c1">#&lt;Class:0x007ffeddb0c1e0&gt;, ActiveModel::Validations::HelperMethods,</span>
</span><span class='line'> <span class="ss">ActiveModel</span><span class="p">:</span><span class="ss">:Validations</span><span class="p">,</span> <span class="ss">ActiveSupport</span><span class="p">:</span><span class="ss">:Callbacks</span><span class="p">,</span> <span class="c1">#&lt;Class:0x007ffeddba5f70&gt;,</span>
</span><span class='line'> <span class="no">Delegator</span><span class="p">,</span> <span class="c1">#&lt;Module:0x007ffedcb35eb0&gt;, BasicObject]  </span>
</span><span class='line'><span class="mi">1</span><span class="o">.</span><span class="mi">9</span><span class="o">.</span><span class="mi">3</span><span class="n">p194</span> <span class="p">:</span><span class="mo">037</span> <span class="o">&gt;</span> <span class="n">warning_object</span><span class="o">.</span><span class="n">__getobj__</span> <span class="o">==</span> <span class="n">e</span>
</span><span class='line'> <span class="o">=&gt;</span> <span class="kp">true</span>
</span></code></pre></td></tr></table></div></figure>


<p>What <code>@warnings</code>  has is an object of class defined during runtime by <em>DelegatorClass</em> .
The problem is that these runtime created classes don&#8217;t get garbage collected.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"></pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="mi">1</span><span class="o">.</span><span class="mi">9</span><span class="o">.</span><span class="mi">3</span><span class="n">p194</span> <span class="p">:</span><span class="mo">007</span> <span class="o">&gt;</span> <span class="n">warning_object_class_id</span> <span class="o">=</span> <span class="n">warning_object</span><span class="o">.</span><span class="n">class</span><span class="o">.</span><span class="n">object_id</span>
</span><span class='line'> <span class="o">=&gt;</span> <span class="mi">70366308884720</span>
</span><span class='line'><span class="mi">1</span><span class="o">.</span><span class="mi">9</span><span class="o">.</span><span class="mi">3</span><span class="n">p194</span> <span class="p">:</span><span class="mo">00</span><span class="mi">8</span> <span class="o">&gt;</span> <span class="n">e_object_id</span> <span class="o">=</span> <span class="n">e</span><span class="o">.</span><span class="n">object_id</span>
</span><span class='line'> <span class="o">=&gt;</span> <span class="mi">70366307844540</span>
</span></code></pre></td></tr></table></div></figure>


<p>We&#8217;ve taken the <em>object_id</em> of the model object and runtime created delegator class(which is an instance of class <em>Class</em> of course). Let&#8217;s set the references to nil and run the GC.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"></pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="mi">1</span><span class="o">.</span><span class="mi">9</span><span class="o">.</span><span class="mi">3</span><span class="n">p194</span> <span class="p">:</span><span class="mo">014</span> <span class="o">&gt;</span> <span class="nb">local_variables</span>
</span><span class='line'> <span class="o">=&gt;</span> <span class="o">[</span><span class="ss">:e_object_id</span><span class="p">,</span> <span class="ss">:warning_object_class_id</span><span class="p">,</span> <span class="ss">:warning_object</span><span class="p">,</span> <span class="ss">:e</span><span class="p">,</span> <span class="ss">:_</span><span class="o">]</span>
</span><span class='line'> <span class="mi">1</span><span class="o">.</span><span class="mi">9</span><span class="o">.</span><span class="mi">3</span><span class="n">p194</span> <span class="p">:</span><span class="mo">00</span><span class="mi">9</span> <span class="o">&gt;</span> <span class="n">warning_object</span> <span class="o">=</span> <span class="n">e</span> <span class="o">=</span> <span class="kp">nil</span>
</span><span class='line'> <span class="o">=&gt;</span> <span class="kp">nil</span>
</span><span class='line'><span class="mi">1</span><span class="o">.</span><span class="mi">9</span><span class="o">.</span><span class="mi">3</span><span class="n">p194</span> <span class="p">:</span><span class="mo">010</span> <span class="o">&gt;</span> <span class="no">GC</span><span class="o">.</span><span class="n">start</span>
</span><span class='line'> <span class="o">=&gt;</span> <span class="kp">nil</span>
</span></code></pre></td></tr></table></div></figure>


<p>Now let&#8217;s use those object_ids to check whether they get GCed.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"></pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="mi">1</span><span class="o">.</span><span class="mi">9</span><span class="o">.</span><span class="mi">3</span><span class="n">p194</span> <span class="p">:</span><span class="mo">011</span> <span class="o">&gt;</span> <span class="no">ObjectSpace</span><span class="o">.</span><span class="n">_id2ref</span> <span class="n">e_object_id</span>
</span><span class='line'><span class="ss">RangeError</span><span class="p">:</span> <span class="mh">0x003fff6ec881bc</span> <span class="n">is</span> <span class="n">recycled</span> <span class="n">object</span>
</span><span class='line'>  <span class="n">from</span> <span class="p">(</span><span class="n">irb</span><span class="p">):</span><span class="mi">11</span><span class="ss">:in</span> <span class="sb">`_id2ref&#39;</span>
</span><span class='line'><span class="sb"> from (irb):11</span>
</span><span class='line'><span class="sb"> from /Users/senthilvs/.rvm/gems/ruby-1.9.3-p194@global/gems/railties-3.2.10/lib/rails/commands/console.rb:47:in `</span><span class="n">start</span><span class="s1">&#39;</span>
</span><span class='line'><span class="s1"> from /Users/senthilvs/.rvm/gems/ruby-1.9.3-p194@global/gems/railties-3.2.10/lib/rails/commands/console.rb:8:in `start&#39;</span>
</span><span class='line'>  <span class="n">from</span> <span class="sr">/Users/sen</span><span class="n">thilvs</span><span class="o">/.</span><span class="n">rvm</span><span class="o">/</span><span class="n">gems</span><span class="o">/</span><span class="n">ruby</span><span class="o">-</span><span class="mi">1</span><span class="o">.</span><span class="mi">9</span><span class="o">.</span><span class="mi">3</span><span class="o">-</span><span class="n">p194</span><span class="vi">@global</span><span class="o">/</span><span class="n">gems</span><span class="o">/</span><span class="n">railties</span><span class="o">-</span><span class="mi">3</span><span class="o">.</span><span class="mi">2</span><span class="o">.</span><span class="mi">10</span><span class="o">/</span><span class="n">lib</span><span class="o">/</span><span class="n">rails</span><span class="o">/</span><span class="n">commands</span><span class="o">.</span><span class="n">rb</span><span class="p">:</span><span class="mi">41</span><span class="ss">:in</span> <span class="sb">`&lt;top (required)&gt;&#39;</span>
</span><span class='line'><span class="sb"> from script/rails:6:in `</span><span class="nb">require</span><span class="s1">&#39;</span>
</span><span class='line'><span class="s1"> from script/rails:6:in `&lt;main&gt;&#39;</span>
</span><span class='line'><span class="mi">1</span><span class="o">.</span><span class="mi">9</span><span class="o">.</span><span class="mi">3</span><span class="n">p194</span> <span class="p">:</span><span class="mo">012</span> <span class="o">&gt;</span> <span class="no">ObjectSpace</span><span class="o">.</span><span class="n">_id2ref</span> <span class="n">warning_object_class_id</span>
</span><span class='line'> <span class="o">=&gt;</span> <span class="c1">#&lt;Class:0x007ffeddb0c1e0&gt; </span>
</span></code></pre></td></tr></table></div></figure>


<p>So, the runtime created anonymous classes never get GCed and stay in memory. This the reason why
the memory was kept on increasing for every request.</p>

<p>We fixed it by replacing <em>validation_scopes</em> with <a href="https://github.com/paneq/activemodel-warnings"><em>activemodel-warnings</em></a>.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[How we debugged memory leak in a rails app.]]></title>
    <link href="http://siliconsenthil.herokuapp.com/blog/2013/01/19/how-we-debugged-rails-memory-leak/"/>
    <updated>2013-01-19T13:29:00+05:30</updated>
    <id>http://siliconsenthil.herokuapp.com/blog/2013/01/19/how-we-debugged-rails-memory-leak</id>
    <content type="html"><![CDATA[<p>We run our app on heroku and kept on getting <a href="https://devcenter.heroku.com/articles/error-codes#r14-memory-quota-exceeded">R14</a>s. Our google and stackoverflow skills did provide
few suggestions and but din&#8217;t help much. We used few tools (<a href="https://github.com/brynary/rack-bug">rack_bug</a>, <a href="https://github.com/noahd1/oink">oink</a>) see the memory usage. They provided who use how much <br/>
but we could make further progress with that. So here&#8217;s what we did to find out.</p>

<!--more-->


<ul>
<li>Figured out what pages create R14

<ul>
<li>Observe pattern of usage</li>
<li>Load test app with multiple usage paths. Figure out which falls soon.</li>
</ul>
</li>
</ul>


<p>This is more of finding usage patterns and making guesses. We should ascertain our guess with heavily loading the suspected page(s) and see the memory pattern. We had a page that was most frequently used. We hit it with jmeter and within in minutes it ended up with R14.</p>


<ul>
<li>Replicated the leak in local machine.

<ul>
<li>Ran the app in production environment and kept hitting the page.</li>
<li>Used <code>vmmap</code> to find out memory usage pattern. (You can use <em>smap</em> or <em>pmap</em> as well.)</li>
<li>Saw the memory usage keep on increasing and never getting stabilized.</li>
</ul>
</li>
</ul>


<p> When we start the rails app and start visiting pages, the memory goes up. It increases to certain extent and gets stable after
a while. Don&#8217;t be misguided by the initial increase in memory as memory leak. It happens for all the pages. But, it gets stable soon. For leaking pages, the memory never gets stabilized.
</p>


<ul>
<li>Drilled down and found the code that leaks.

<ul>
<li>Removed the action and view code and rendered the page and saw memory was stable. This is to ensure
the problem is with the specific page and not the framework as such.</li>
<li>Added code step-by-step in chunks and observed memory usage.</li>
<li>Figured out which chunk leaks the memory.</li>
</ul>
</li>
</ul>


<p><span> Finally, nailed down to <code>model.has_warnings?</code>.</span>
We use <a href="https://github.com/gtd/validation_scopes">validation_scopes</a> which was the cause in our case. It was creating metaclasses for validation
and those classes did not get garbage collected (<a href="http://siliconsenthil.herokuapp.com/blog/2013/01/19/validation-scopes-leaks-memory/">details</a>).</p>

<p>We fixed it by replacing <em>validation_scopes</em> with <a href="https://github.com/paneq/activemodel-warnings"><em>activemodel-warnings</em></a>.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Onclick link disabling with jQuery]]></title>
    <link href="http://siliconsenthil.herokuapp.com/blog/2011/04/15/onclick-link-disabling-with-jquery/"/>
    <updated>2011-04-15T16:07:00+05:30</updated>
    <id>http://siliconsenthil.herokuapp.com/blog/2011/04/15/onclick-link-disabling-with-jquery</id>
    <content type="html"><![CDATA[<p>Days back I have come across a common requirement to disable link on clicking it once. Typically, it&#8217;s because on click of those links some AJAX thins happen and some fragments of the page gets updated.</p>

<!--more-->


<p>I had those sort of links across screens and I have written Javascript using jQuery as &#8216;Unobtrusive Javascript&#8217;. All I gotta do is to add a class called &#8216;link_to_disable&#8217; to the links I wanted to disable.</p>

<iframe style="width: 100%; height: 300px; border: 1px solid black;" src="http://jsfiddle.net/FrBMz/18/embedded#result_trigger" allowfullscreen="allowfullscreen" frameborder="0"></iframe>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[If else or Switch case to Polymorphism]]></title>
    <link href="http://siliconsenthil.herokuapp.com/blog/2011/04/15/if-else-or-switch-case-to-polymorphism/"/>
    <updated>2011-04-15T15:59:00+05:30</updated>
    <id>http://siliconsenthil.herokuapp.com/blog/2011/04/15/if-else-or-switch-case-to-polymorphism</id>
    <content type="html"><![CDATA[<p>If you try to express your logic in if-else way like this,</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"></pre></td><td class='code'><pre><code class='java'><span class='line'>  <span class="kd">private</span> <span class="kd">static</span> <span class="n">String</span> <span class="nf">getSoundIfElseWay</span><span class="o">(</span><span class="n">String</span> <span class="n">animal</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>       <span class="k">if</span> <span class="o">(</span><span class="n">animal</span><span class="o">.</span><span class="na">equalsIgnoreCase</span><span class="o">(</span><span class="s">&quot;Dog&quot;</span><span class="o">))</span>
</span><span class='line'>            <span class="k">return</span> <span class="s">&quot;Bark&quot;</span><span class="o">;</span>
</span><span class='line'>       <span class="k">else</span> <span class="nf">if</span> <span class="o">(</span><span class="n">animal</span><span class="o">.</span><span class="na">equalsIgnoreCase</span><span class="o">(</span><span class="s">&quot;Cat&quot;</span><span class="o">))</span>
</span><span class='line'>            <span class="k">return</span> <span class="s">&quot;Mew&quot;</span><span class="o">;</span>
</span><span class='line'>       <span class="k">else</span> <span class="nf">if</span> <span class="o">(</span><span class="n">animal</span><span class="o">.</span><span class="na">equalsIgnoreCase</span><span class="o">(</span><span class="s">&quot;Lion&quot;</span><span class="o">))</span>
</span><span class='line'>            <span class="k">return</span> <span class="s">&quot;Roar&quot;</span><span class="o">;</span>
</span><span class='line'>       <span class="k">return</span> <span class="s">&quot;&quot;</span><span class="o">;</span>
</span><span class='line'>  <span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>then polymorphic way would be,</p>

<!--more-->


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"></pre></td><td class='code'><pre><code class='java'><span class='line'> <span class="kd">private</span> <span class="kd">static</span> <span class="n">String</span> <span class="nf">getSoundPolymorphicWay</span><span class="o">(</span><span class="n">Animal</span> <span class="n">animal</span><span class="o">){</span>
</span><span class='line'>      <span class="k">return</span> <span class="n">animal</span><span class="o">.</span><span class="na">say</span><span class="o">();</span>
</span><span class='line'> <span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"></pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">public</span> <span class="kd">abstract</span> <span class="kd">class</span> <span class="nc">Animal</span> <span class="o">{</span>
</span><span class='line'>      <span class="kd">public</span> <span class="kd">abstract</span> <span class="n">String</span> <span class="nf">say</span><span class="o">();</span>
</span><span class='line'> <span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"></pre></td><td class='code'><pre><code class='java'><span class='line'> <span class="kd">public</span> <span class="kd">class</span> <span class="nc">Dog</span> <span class="kd">extends</span> <span class="n">Animal</span><span class="o">{</span>
</span><span class='line'>      <span class="nd">@Override</span>
</span><span class='line'>      <span class="kd">public</span> <span class="n">String</span> <span class="nf">say</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>           <span class="k">return</span> <span class="s">&quot;Bark&quot;</span><span class="o">;</span>
</span><span class='line'>      <span class="o">}</span>
</span><span class='line'> <span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"></pre></td><td class='code'><pre><code class='java'><span class='line'> <span class="kd">public</span> <span class="kd">class</span> <span class="nc">Cat</span> <span class="kd">extends</span> <span class="n">Animal</span> <span class="o">{</span>
</span><span class='line'>      <span class="nd">@Override</span>
</span><span class='line'>      <span class="kd">public</span> <span class="n">String</span> <span class="nf">say</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>           <span class="k">return</span> <span class="s">&quot;Mew&quot;</span><span class="o">;</span>
</span><span class='line'>      <span class="o">}</span>
</span><span class='line'> <span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"></pre></td><td class='code'><pre><code class='java'><span class='line'> <span class="kd">public</span> <span class="kd">class</span> <span class="nc">Lion</span> <span class="kd">extends</span> <span class="n">Animal</span> <span class="o">{</span>
</span><span class='line'>      <span class="nd">@Override</span>
</span><span class='line'>      <span class="kd">public</span> <span class="n">String</span> <span class="nf">say</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>           <span class="k">return</span> <span class="s">&quot;Roar&quot;</span><span class="o">;</span>
</span><span class='line'>      <span class="o">}</span>
</span><span class='line'> <span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Look at the change in behavior based on the condition. If you could come up with a object than could take this behavior, push that to the corresponding object.</p>

<p>Same rule applies to switch-case also.</p>
]]></content>
  </entry>
  
</feed>
