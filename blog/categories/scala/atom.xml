<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: scala | siliconsenthil.in]]></title>
  <link href="http://siliconsenthil.in/blog/categories/scala/atom.xml" rel="self"/>
  <link href="http://siliconsenthil.in/"/>
  <updated>2015-11-05T07:18:36+00:00</updated>
  <id>http://siliconsenthil.in/</id>
  <author>
    <name><![CDATA[Senthil V S]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Why scala should be your next programming language?]]></title>
    <link href="http://siliconsenthil.in/blog/2014/06/27/why-scala-why-now/"/>
    <updated>2014-06-27T10:03:00+01:00</updated>
    <id>http://siliconsenthil.in/blog/2014/06/27/why-scala-why-now</id>
    <content type="html"><![CDATA[<p>I with <a href="http://in.linkedin.com/pub/aravindh-sridharan/31/8bb/b5">Aravindh</a> gave a talk @ <a href="http://twchennai.github.io/geeknight/">Geeknight, Chennai</a> on 26-JUN-2014. Sharing the presentation here.</p>

<!-- more -->




<script async class="speakerdeck-embed" data-id="9a8f5710dfe00131adb86ab78659ca38" data-ratio="1.33333333333333" src="http://siliconsenthil.in//speakerdeck.com/assets/embed.js"></script>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Apache Camel with Scala: Extending DSL]]></title>
    <link href="http://siliconsenthil.in/blog/2013/07/11/apache-camel-with-scala-extending-dsl/"/>
    <updated>2013-07-11T07:58:00+01:00</updated>
    <id>http://siliconsenthil.in/blog/2013/07/11/apache-camel-with-scala-extending-dsl</id>
    <content type="html"><![CDATA[<p>Let's take a very simple use case of integrating with a http endpoint which has an authentication mechanism.</p>

<p>``` scala</p>

<pre><code>from("someWhere")
  //Do some processing
  .setHeader("Authorization", _ =&gt; "OAuth anObfuscatedTokenString")
  .setHeader(Exchange.HTTP_METHOD, "GET")
  .to("http://someServer.com")
  .process(//Do something with response)

from("someWhereElse")
  //Do some processing
  .setHeader("Authorization", _ =&gt; "OAuth anObfuscatedTokenString")
  .setHeader(Exchange.HTTP_METHOD, "POST")
  .to("http://someServer.com")
  .process(//Do something with response)
</code></pre>

<p>```</p>

<p>You can clearly see if have many routes like this, there will be a lot of duplication.</p>

<!-- more -->


<p>So we wanted to extend the DSL so that these kind of duplications are avoided and we could come up with more readable routes.</p>

<p>We created an implicit class and add  method like <code>toSomeServer</code> which abstrats the details.</p>

<p>``` scala
object DSLImplicits {
  implicit class RichDSL(val dsl: DSL) {</p>

<pre><code>def toSomeServer = {
  dsl.setHeader("Authorization", _ =&gt; "OAuth anObfuscatedTokenString")
    .to("http://someServer.com")
}

def get = dsl.setHeader(Exchange.HTTP_METHOD, _ =&gt; HttpMethods.GET.name)

def post = dsl.setHeader(Exchange.HTTP_METHOD, _ =&gt; HttpMethods.POST.name)
</code></pre>

<p>  }
}</p>

<p>```</p>

<p>The above extention can be used like this.</p>

<p>``` scala</p>

<pre><code>import DSLImplicits.RichDSL
//----------------------------
from("someWhere")
  //Do some processing
  .get.toSomeServer
  .process(//Do something with response)

from("someWhereElse")
  //Do some processing
  .post.toSomeServer
  .process(//Do something with response)
</code></pre>

<p>```</p>

<p>You can clearly see this ends with more readable route.</p>

<p>This is is <a href="http://i000174.blogspot.in/2011/02/is-it-possible-to-extend-apache-camel_28.html">not possible</a> with java dsl. As given <a href="http://stackoverflow.com/questions/8010084/camel-extend-java-dsl">here</a> extending can be possible with Groovy based DSL too.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Apache Camel with Scala: Testing Styles]]></title>
    <link href="http://siliconsenthil.in/blog/2013/07/07/apache-camel-with-scala-testing-styles/"/>
    <updated>2013-07-07T15:39:00+01:00</updated>
    <id>http://siliconsenthil.in/blog/2013/07/07/apache-camel-with-scala-testing-styles</id>
    <content type="html"><![CDATA[<p>Scala with Camel is a very powerful combination for integration. Camel has fantastic support for
<a href="http://camel.apache.org/testing.html" target="_blank">testing</a>. It's very easy and useful to test-drive the integration. Following are few styles when it comes to testing camel with scala.</p>

<!-- more -->


<h3>Use CamelTestSupport, JUnit style</h3>

<p>CamelTestSupport already has JUnit annotations to run do setup and teardown in JUnit test suite. The simplest way to get started is to use this with ScalaTest. ScalaTest already has JUnitSuite trait to have JUnit style tests. This is documented <a href="http://www.kai-waehner.de/blog/2011/06/23/apache-camel-and-scala-a-powerful-combination/" target="_blank">here</a>(see Testing section).</p>

<h3>Extending CamelTestSupport</h3>

<p>If you dont like the JUnit style and wanna follow any other styles ScalaTest supports, you can create a base test support class that looks like below.</p>

<p>``` scala</p>

<p>class CustomCamelFlatTestSupport extends CamelTestSupport with BeforeAndAfterAll with FlatSpec{</p>

<p>  override def beforeAll() {</p>

<pre><code>setUp()
</code></pre>

<p>  }</p>

<p>  override def afterAll() {</p>

<pre><code>tearDown()
</code></pre>

<p>  }
}
```</p>

<p>We are following <i>FlatSpec</i> style of ScalaTest.</p>

<p>``` scala
class YourRouteSpec extends CustomCamelFlatTestSupport{
  override def createRouteBuilder = YourRouteBuilder.buildRoute</p>

<p>  before {</p>

<pre><code>interceptTimer()
</code></pre>

<p>  }</p>

<p>  private def interceptTimer() {</p>

<pre><code>context.getRouteDefinition("YourRouteName").adviceWith(context, new AdviceWithRouteBuilder {
  def configure() {
    replaceFromWith("direct:testEndpoint")
  }
})
</code></pre>

<p>  }</p>

<p>  "Your Route" should "do something useful" in {</p>

<pre><code>template.sendBody("direct:testEndpoint", "Some body")
//Assert some behaviour
}
</code></pre>

<p>}
```</p>

<p>We override the <code>createRouteBuilder</code> with the route we wanna test. There might be needs to intercept routes for testing purpose.</p>

<p>But, if wanna have different routes or different interceptors in every test, this style would not suite.</p>

<h3>CamelTestHelper trait</h3>

<p>With this style you can pass differnt builders and different interceptors and the test code is a block that get the test support.</p>

<p>Create a trait like below</p>

<p>``` scala
trait CamelTestHelper{
  def withCamelTestSupport(routeBuilder: RouteBuilder, interceptor:(ModelCamelContext => Unit) = identity(_))(testWithCamelSupport: CamelTestSupport => Any){</p>

<pre><code>new CamelTestSupport{
  override def createRegistry = {
    val registry = super.createRegistry
    //Put entries to registry if needed.
    registry
  }
  override def createRouteBuilder() = routeBuilder
  setUp()
  interceptor(context)
  testWithCamelSupport(this)
  tearDown()
}
</code></pre>

<p>  }
}
```</p>

<p>A typical way to use the trait in test would be,</p>

<p>``` scala
  "Your Route" should "do something useful" in {</p>

<pre><code>val directEndpoint = "direct:testEndpoint"

val testRouteBuilder = new RouteBuilder {
  from("timer:doesNotMatter").routeId("OurRoute").to("file:/some/path"))
}.builder

def interceptor(context: ModelCamelContext) {
  context.getRouteDefinition("OurRoute").adviceWith(context, new AdviceWithRouteBuilder {
    def configure() {
      replaceFromWith(directEndpoint)
    }
  })
}

withCamelTestSupport(testRouteBuilder, interceptor){ testSupport =&gt;
    testSupport.template.sendBody(directEndpoint, "Some content")
    //Assert files exists @ /some/path
  }
}
</code></pre>

<p>  }
```</p>

<p>With this style we get full flexibility about testing routes.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Iteration, Recursion and Tail recursion]]></title>
    <link href="http://siliconsenthil.in/blog/2013/02/15/iteration-recursion-and-tail-recursion/"/>
    <updated>2013-02-15T12:38:00+00:00</updated>
    <id>http://siliconsenthil.in/blog/2013/02/15/iteration-recursion-and-tail-recursion</id>
    <content type="html"><![CDATA[<p>Courtesy: <a href="https://class.coursera.org/progfun-2012-001/class/index">Functional Programming Principles in Scala</a></p>

<p><strong>Problem:</strong> Given <em>a</em> and <em>b</em>,<br/>find the sum of range of numbers between <em>a</em> and <em>b</em>.<br>E.g. Given 1 and 4, the result is 10 (1+2+3+4). Simple.</p>

<p><strong>Language:</strong> Scala</p>

<p>Let's do this with programmers' favorite, Iteration</p>

<!--more-->


<p>```scala</p>

<pre><code>def iterative_sum(a: Long, b: Long):Long =  {
  var result = 0L;
  for(i &lt;- a until b){result=result+i}
  return result+b;
}
</code></pre>

<p>```</p>

<p>If we had to do this with recursion,</p>

<p><code>scala
def sum(a: Long, b: Long): Long = if(a &gt; b) 0 else a + sum(a+1, b)
</code></p>

<p>This works for smaller values. There's a problem with this for bigger values because the way it's implemented. If we see how it works, it would be obvious to figure that out. Assume the red grid as a limited size stack.</p>

<p><img src="http://i50.tinypic.com/1218htk.png" width="410"></p>

<p>It keeps putting expressions to stack till it could evaluate to a value.
Now, you can see it throws <em>StackOverflowError</em> for larger input.</p>

<p><img src="http://i45.tinypic.com/2mw8ry1.png" width="410"></p>

<p>This is the problem with recursion. This might be one reason programmers tend to avoid recursion as it might not be obvious to guess when it fails.</p>

<p>If we could write a recursion function that does not force to use stack then we can avoid this error. And that is called as tail recursion. The way to do is that the last line of the recursion function should be just the recursion and not something else to do with the result.</p>

<p>With the help of nested function construct in scala, we could write something like this. Here <code>loop(a+1, acc+a)</code> is the recusion call. As you can see this is the only expression, it does not require stack to store intermediate result.</p>

<p>```scala</p>

<pre><code>def tail_sum(a: Long, b: Long): Long ={
  def loop(a: Long, acc: Long): Long = {
    if(a &gt; b) acc
    else loop(a+1, acc+a)
  }
  loop(a, 0)
} 
</code></pre>

<p>```</p>

<p>I tried the above all in for a large value (>6998 in my machine) and saw recursion failing while iteration and tail recursion are able to return result.</p>

<p><div><script src='https://gist.github.com/4959395.js?file=IterationRecursionTailRecursion.scala'></script>
<noscript><pre><code></code></pre></noscript></div>
</p>
]]></content>
  </entry>
  
</feed>
