<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[siliconsenthil.in]]></title>
  <link href="http://siliconsenthil.in/atom.xml" rel="self"/>
  <link href="http://siliconsenthil.in/"/>
  <updated>2019-05-03T15:34:06+05:30</updated>
  <id>http://siliconsenthil.in/</id>
  <author>
    <name><![CDATA[Senthil V S]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[How we built our own heroku]]></title>
    <link href="http://siliconsenthil.in/blog/2019/03/09/how-we-built-our-own-heroku/"/>
    <updated>2019-03-09T17:30:00+05:30</updated>
    <id>http://siliconsenthil.in/blog/2019/03/09/how-we-built-our-own-heroku</id>
    <content type="html"><![CDATA[<p>At Simpl, we faced a challenge to run a polyglot microservices based platform in auto-scalable and secure manner. We did not have dedicated DevOps person. We could not go ahead with a PaaS solution for lack of customizability. So we built our own solution called <a href="https://github.com/GetSimpl/cloudlift">cloudlift</a>. I and <a href="https://www.linkedin.com/in/jeechudeka/">Jeechu</a> presented this at multiple meetups.</p>

<p>Sharing the presentation here&#8230;</p>

<!-- more -->




<div style="left: 0; width: 100%; height: 0; position: relative; padding-bottom: 74.9288%;"><iframe src="http://siliconsenthil.in//speakerdeck.com/player/b1e4b76e2081438a8d63da5801ca5f34" style="border: 0; top: 0; left: 0; width: 100%; height: 100%; position: absolute;" allowfullscreen scrolling="no" allow="autoplay; encrypted-media"></iframe></div>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[So, you built webhooks? And wanna test ]]></title>
    <link href="http://siliconsenthil.in/blog/2017/04/02/so-you-built-webhooks-and-wanna-test/"/>
    <updated>2017-04-02T23:28:00+05:30</updated>
    <id>http://siliconsenthil.in/blog/2017/04/02/so-you-built-webhooks-and-wanna-test</id>
    <content type="html"><![CDATA[<p>When you build public facing APIs, there are operations that could not fit enough into request-response cycle. Especially, when it involves user interaction.</p>

<p>Take an example of sending email. You can expose an API endpoint for clients to send email. But whenever the email is opened, the client want to do some action. They can keep polling you and get the status of the email of course. But, that&#8217;s suboptimal on both sides. So you want to tell the client when the email is opened. Now, that&#8217;s when you do webhooks (<a href="https://webhooks.pbworks.com/w/page/13385124/FrontPage">ref</a>).</p>

<p>Webhooks are easier to build. After all, it&#8217;s just one http call you will have to make.</p>

<p>But, testing it is not so.</p>

<!-- more -->


<p><strong>Public URL:</strong> We need the webhook URL to be accessible from the application server. For local testing <code>localhost</code> would do. But when you want to test the behaviour in CI ot other enviroments, it requires to be a public URL.</p>

<p><strong>Recorded requests:</strong> Once the application is invoked and it called the webhook URL, we need to assert on the request made by application. So we need a way to record those requests and assert later.</p>

<p>So <a href="https://github.com/siliconsenthil/webhook_recorder">webhook_recorder</a> is born. It uses <code>WEBrick</code> server to run locally and  uses <a href="https://ngrok.com">ngrok</a> to expose that.</p>

<iframe src="https://docs.google.com/presentation/d/1-Ic9WCukD9D1FGYISvo1TAfa5hW5YsN0zCF9QotGujQ/embed?start=false&loop=false&delayms=3000" frameborder="0" width="600" height="460" allowfullscreen="true" mozallowfullscreen="true" webkitallowfullscreen="true"></iframe>




<br>


<br>


<p><em>PS: We at <a href="https://getsimpl.com">Simpl</a> are in a mission of making money simple. We value quality, talent and most importantly culture. Wanna join hands? Let me know at <a href="https://twitter.com/siliconsenthil">@siliconsenthil</a></em></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Why scala should be your next programming language?]]></title>
    <link href="http://siliconsenthil.in/blog/2014/06/27/why-scala-why-now/"/>
    <updated>2014-06-27T10:03:00+05:30</updated>
    <id>http://siliconsenthil.in/blog/2014/06/27/why-scala-why-now</id>
    <content type="html"><![CDATA[<p>I with <a href="http://in.linkedin.com/pub/aravindh-sridharan/31/8bb/b5">Aravindh</a> gave a talk @ <a href="http://twchennai.github.io/geeknight/">Geeknight, Chennai</a> on 26-JUN-2014. Sharing the presentation here.</p>

<!-- more -->




<script async class="speakerdeck-embed" data-id="9a8f5710dfe00131adb86ab78659ca38" data-ratio="1.33333333333333" src="http://siliconsenthil.in//speakerdeck.com/assets/embed.js"></script>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[VCR - Match body]]></title>
    <link href="http://siliconsenthil.in/blog/2014/04/02/vcr-match-body/"/>
    <updated>2014-04-02T18:50:00+05:30</updated>
    <id>http://siliconsenthil.in/blog/2014/04/02/vcr-match-body</id>
    <content type="html"><![CDATA[<p>We had to have make external API calls and we used <a href="https://github.com/vcr/vcr">vcr</a> to record and replay in our integration tests. All was going on well.</p>

<p>Despite this coverage, we saw our code breaking in production due to small chages in request xml body. We wanted our integration spec to cover these too. By default, vcr <a href="https://www.relishapp.com/vcr/vcr/v/2-0-0-beta1/docs/request-matching">matches</a> request method and url. We wanted it to match the post body too. Simple match by body does not solve as it does plain string match. It would give <a href="http://stackoverflow.com/a/17838775/227705">false negatives</a>.</p>

<p>So, we decided to match our xml request body. This is what we did.</p>

<!-- more -->




<figure class='code'><figcaption><span>Gemfile</span></figcaption><div class="highlight"><table><tr><td class="gutter"></pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">gem</span> <span class="s1">&#39;equivalent-xml&#39;</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span>spec/spec_helper.rb</span></figcaption><div class="highlight"><table><tr><td class="gutter"></pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="no">VCR</span><span class="o">.</span><span class="n">configure</span> <span class="k">do</span> <span class="o">|</span><span class="n">c</span><span class="o">|</span>
</span><span class='line'>  <span class="c1">#some other configs</span>
</span><span class='line'>  <span class="n">c</span><span class="o">.</span><span class="n">default_cassette_options</span> <span class="o">=</span> <span class="p">{</span><span class="ss">record</span><span class="p">:</span> <span class="ss">:once</span><span class="p">,</span> <span class="n">match_requests_on</span><span class="p">:</span>  <span class="o">[</span><span class="ss">:method</span><span class="p">,</span> <span class="ss">:uri</span><span class="p">,</span> <span class="ss">:xml_post_body</span><span class="o">]</span><span class="p">}</span>
</span><span class='line'>  <span class="n">c</span><span class="o">.</span><span class="n">register_request_matcher</span> <span class="ss">:xml_post_body</span> <span class="k">do</span> <span class="o">|</span><span class="n">request_1</span><span class="p">,</span> <span class="n">request_2</span><span class="o">|</span>
</span><span class='line'>    <span class="no">XmlPostBodyMatcher</span><span class="o">.</span><span class="n">match?</span><span class="p">(</span><span class="n">request_1</span><span class="p">,</span> <span class="n">request_2</span><span class="p">)</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span>spec/support/xml_post_body_matcher.rb</span></figcaption><div class="highlight"><table><tr><td class="gutter"></pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">XmlPostBodyMatcher</span>
</span><span class='line'>  <span class="k">def</span> <span class="nc">self</span><span class="o">.</span><span class="nf">match?</span><span class="p">(</span><span class="n">request_1</span><span class="p">,</span> <span class="n">request_2</span><span class="p">)</span>
</span><span class='line'>    <span class="k">return</span> <span class="kp">true</span> <span class="k">if</span> <span class="n">request_1</span><span class="o">.</span><span class="n">method</span> <span class="o">==</span> <span class="ss">:get</span>
</span><span class='line'>    <span class="k">return</span> <span class="kp">true</span> <span class="k">if</span> <span class="o">!</span><span class="n">xml_body?</span><span class="p">(</span><span class="n">request_1</span><span class="p">)</span>
</span><span class='line'>    <span class="no">EquivalentXml</span><span class="o">.</span><span class="n">equivalent?</span><span class="p">(</span><span class="ss">Nokogiri</span><span class="p">:</span><span class="ss">:XML</span><span class="p">(</span><span class="n">request_1</span><span class="o">.</span><span class="n">body</span><span class="p">),</span> <span class="ss">Nokogiri</span><span class="p">:</span><span class="ss">:XML</span><span class="p">(</span><span class="n">request_2</span><span class="o">.</span><span class="n">body</span><span class="p">))</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>We added a new matcher called <code>XmlPostBodyMatcher</code> and it uses <code>equivalent-xml</code> gem to match if the post body is an xml.</p>

<p>This has helped us to have strict-yet-sensible  integration spec and increased our confidence on the test suite.</p>

<p>Hope this is useful for you too.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Apache Camel with Scala: Extending DSL]]></title>
    <link href="http://siliconsenthil.in/blog/2013/07/11/apache-camel-with-scala-extending-dsl/"/>
    <updated>2013-07-11T07:58:00+05:30</updated>
    <id>http://siliconsenthil.in/blog/2013/07/11/apache-camel-with-scala-extending-dsl</id>
    <content type="html"><![CDATA[<p>Let&#8217;s take a very simple use case of integrating with a http endpoint which has an authentication mechanism.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"></pre></td><td class='code'><pre><code class='scala'><span class='line'>    <span class="n">from</span><span class="o">(</span><span class="s">&quot;someWhere&quot;</span><span class="o">)</span>
</span><span class='line'>      <span class="c1">//Do some processing</span>
</span><span class='line'>      <span class="o">.</span><span class="n">setHeader</span><span class="o">(</span><span class="s">&quot;Authorization&quot;</span><span class="o">,</span> <span class="k">_</span> <span class="k">=&gt;</span> <span class="s">&quot;OAuth anObfuscatedTokenString&quot;</span><span class="o">)</span>
</span><span class='line'>      <span class="o">.</span><span class="n">setHeader</span><span class="o">(</span><span class="nc">Exchange</span><span class="o">.</span><span class="nc">HTTP_METHOD</span><span class="o">,</span> <span class="s">&quot;GET&quot;</span><span class="o">)</span>
</span><span class='line'>      <span class="o">.</span><span class="n">to</span><span class="o">(</span><span class="s">&quot;http://someServer.com&quot;</span><span class="o">)</span>
</span><span class='line'>      <span class="o">.</span><span class="n">process</span><span class="o">(</span><span class="c1">//Do something with response)</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">from</span><span class="o">(</span><span class="s">&quot;someWhereElse&quot;</span><span class="o">)</span>
</span><span class='line'>      <span class="c1">//Do some processing</span>
</span><span class='line'>      <span class="o">.</span><span class="n">setHeader</span><span class="o">(</span><span class="s">&quot;Authorization&quot;</span><span class="o">,</span> <span class="k">_</span> <span class="k">=&gt;</span> <span class="s">&quot;OAuth anObfuscatedTokenString&quot;</span><span class="o">)</span>
</span><span class='line'>      <span class="o">.</span><span class="n">setHeader</span><span class="o">(</span><span class="nc">Exchange</span><span class="o">.</span><span class="nc">HTTP_METHOD</span><span class="o">,</span> <span class="s">&quot;POST&quot;</span><span class="o">)</span>
</span><span class='line'>      <span class="o">.</span><span class="n">to</span><span class="o">(</span><span class="s">&quot;http://someServer.com&quot;</span><span class="o">)</span>
</span><span class='line'>      <span class="o">.</span><span class="n">process</span><span class="o">(</span><span class="c1">//Do something with response)</span>
</span></code></pre></td></tr></table></div></figure>


<p>You can clearly see if have many routes like this, there will be a lot of duplication.</p>

<!-- more -->


<p>So we wanted to extend the DSL so that these kind of duplications are avoided and we could come up with more readable routes.</p>

<p>We created an implicit class and add  method like <code>toSomeServer</code> which abstrats the details.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"></pre></td><td class='code'><pre><code class='scala'><span class='line'><span class="k">object</span> <span class="nc">DSLImplicits</span> <span class="o">{</span>
</span><span class='line'>  <span class="k">implicit</span> <span class="k">class</span> <span class="nc">RichDSL</span><span class="o">(</span><span class="k">val</span> <span class="n">dsl</span><span class="k">:</span> <span class="kt">DSL</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>    <span class="k">def</span> <span class="n">toSomeServer</span> <span class="k">=</span> <span class="o">{</span>
</span><span class='line'>      <span class="n">dsl</span><span class="o">.</span><span class="n">setHeader</span><span class="o">(</span><span class="s">&quot;Authorization&quot;</span><span class="o">,</span> <span class="k">_</span> <span class="k">=&gt;</span> <span class="s">&quot;OAuth anObfuscatedTokenString&quot;</span><span class="o">)</span>
</span><span class='line'>          <span class="o">.</span><span class="n">to</span><span class="o">(</span><span class="s">&quot;http://someServer.com&quot;</span><span class="o">)</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">def</span> <span class="n">get</span> <span class="k">=</span> <span class="n">dsl</span><span class="o">.</span><span class="n">setHeader</span><span class="o">(</span><span class="nc">Exchange</span><span class="o">.</span><span class="nc">HTTP_METHOD</span><span class="o">,</span> <span class="k">_</span> <span class="k">=&gt;</span> <span class="nc">HttpMethods</span><span class="o">.</span><span class="nc">GET</span><span class="o">.</span><span class="n">name</span><span class="o">)</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">def</span> <span class="n">post</span> <span class="k">=</span> <span class="n">dsl</span><span class="o">.</span><span class="n">setHeader</span><span class="o">(</span><span class="nc">Exchange</span><span class="o">.</span><span class="nc">HTTP_METHOD</span><span class="o">,</span> <span class="k">_</span> <span class="k">=&gt;</span> <span class="nc">HttpMethods</span><span class="o">.</span><span class="nc">POST</span><span class="o">.</span><span class="n">name</span><span class="o">)</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>The above extention can be used like this.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"></pre></td><td class='code'><pre><code class='scala'><span class='line'><span class="k">import</span> <span class="nn">DSLImplicits.RichDSL</span>
</span><span class='line'><span class="c1">//----------------------------</span>
</span><span class='line'><span class="n">from</span><span class="o">(</span><span class="s">&quot;someWhere&quot;</span><span class="o">)</span>
</span><span class='line'>  <span class="c1">//Do some processing</span>
</span><span class='line'>  <span class="o">.</span><span class="n">get</span><span class="o">.</span><span class="n">toSomeServer</span>
</span><span class='line'>  <span class="o">.</span><span class="n">process</span><span class="o">(</span><span class="c1">//Do something with response)</span>
</span><span class='line'>
</span><span class='line'><span class="n">from</span><span class="o">(</span><span class="s">&quot;someWhereElse&quot;</span><span class="o">)</span>
</span><span class='line'>  <span class="c1">//Do some processing</span>
</span><span class='line'>  <span class="o">.</span><span class="n">post</span><span class="o">.</span><span class="n">toSomeServer</span>
</span><span class='line'>  <span class="o">.</span><span class="n">process</span><span class="o">(</span><span class="c1">//Do something with response)</span>
</span></code></pre></td></tr></table></div></figure>


<p>You can clearly see this ends with more readable route.</p>

<p>This is is <a href="http://i000174.blogspot.in/2011/02/is-it-possible-to-extend-apache-camel_28.html">not possible</a> with java dsl. As given <a href="http://stackoverflow.com/questions/8010084/camel-extend-java-dsl">here</a> extending can be possible with Groovy based DSL too.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Apache Camel with Scala: Testing Styles]]></title>
    <link href="http://siliconsenthil.in/blog/2013/07/07/apache-camel-with-scala-testing-styles/"/>
    <updated>2013-07-07T15:39:00+05:30</updated>
    <id>http://siliconsenthil.in/blog/2013/07/07/apache-camel-with-scala-testing-styles</id>
    <content type="html"><![CDATA[<p>Scala with Camel is a very powerful combination for integration. Camel has fantastic support for
<a href="http://camel.apache.org/testing.html" target="_blank">testing</a>. It&#8217;s very easy and useful to test-drive the integration. Following are few styles when it comes to testing camel with scala.</p>

<!-- more -->


<h3>Use CamelTestSupport, JUnit style</h3>

<p>CamelTestSupport already has JUnit annotations to run do setup and teardown in JUnit test suite. The simplest way to get started is to use this with ScalaTest. ScalaTest already has JUnitSuite trait to have JUnit style tests. This is documented <a href="http://www.kai-waehner.de/blog/2011/06/23/apache-camel-and-scala-a-powerful-combination/" target="_blank">here</a>(see Testing section).</p>

<h3>Extending CamelTestSupport</h3>

<p>If you dont like the JUnit style and wanna follow any other styles ScalaTest supports, you can create a base test support class that looks like below.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"></pre></td><td class='code'><pre><code class='scala'><span class='line'><span class="k">class</span> <span class="nc">CustomCamelFlatTestSupport</span> <span class="k">extends</span> <span class="nc">CamelTestSupport</span> <span class="k">with</span> <span class="nc">BeforeAndAfterAll</span> <span class="k">with</span> <span class="nc">FlatSpec</span><span class="o">{</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">override</span> <span class="k">def</span> <span class="n">beforeAll</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>    <span class="n">setUp</span><span class="o">()</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">override</span> <span class="k">def</span> <span class="n">afterAll</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>    <span class="n">tearDown</span><span class="o">()</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>We are following <i>FlatSpec</i> style of ScalaTest.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"></pre></td><td class='code'><pre><code class='scala'><span class='line'><span class="k">class</span> <span class="nc">YourRouteSpec</span> <span class="k">extends</span> <span class="nc">CustomCamelFlatTestSupport</span><span class="o">{</span>
</span><span class='line'>  <span class="k">override</span> <span class="k">def</span> <span class="n">createRouteBuilder</span> <span class="k">=</span> <span class="nc">YourRouteBuilder</span><span class="o">.</span><span class="n">buildRoute</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">before</span> <span class="o">{</span>
</span><span class='line'>    <span class="n">interceptTimer</span><span class="o">()</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">private</span> <span class="k">def</span> <span class="n">interceptTimer</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>    <span class="n">context</span><span class="o">.</span><span class="n">getRouteDefinition</span><span class="o">(</span><span class="s">&quot;YourRouteName&quot;</span><span class="o">).</span><span class="n">adviceWith</span><span class="o">(</span><span class="n">context</span><span class="o">,</span> <span class="k">new</span> <span class="nc">AdviceWithRouteBuilder</span> <span class="o">{</span>
</span><span class='line'>      <span class="k">def</span> <span class="n">configure</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">replaceFromWith</span><span class="o">(</span><span class="s">&quot;direct:testEndpoint&quot;</span><span class="o">)</span>
</span><span class='line'>      <span class="o">}</span>
</span><span class='line'>    <span class="o">})</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="s">&quot;Your Route&quot;</span> <span class="n">should</span> <span class="s">&quot;do something useful&quot;</span> <span class="n">in</span> <span class="o">{</span>
</span><span class='line'>    <span class="n">template</span><span class="o">.</span><span class="n">sendBody</span><span class="o">(</span><span class="s">&quot;direct:testEndpoint&quot;</span><span class="o">,</span> <span class="s">&quot;Some body&quot;</span><span class="o">)</span>
</span><span class='line'>    <span class="c1">//Assert some behaviour</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>We override the <code>createRouteBuilder</code> with the route we wanna test. There might be needs to intercept routes for testing purpose.</p>

<p>But, if wanna have different routes or different interceptors in every test, this style would not suite.</p>

<h3>CamelTestHelper trait</h3>

<p>With this style you can pass differnt builders and different interceptors and the test code is a block that get the test support.</p>

<p>Create a trait like below</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"></pre></td><td class='code'><pre><code class='scala'><span class='line'><span class="k">trait</span> <span class="nc">CamelTestHelper</span><span class="o">{</span>
</span><span class='line'>  <span class="k">def</span> <span class="n">withCamelTestSupport</span><span class="o">(</span><span class="n">routeBuilder</span><span class="k">:</span> <span class="kt">RouteBuilder</span><span class="o">,</span> <span class="n">interceptor</span><span class="k">:</span><span class="o">(</span><span class="kt">ModelCamelContext</span> <span class="o">=&gt;</span> <span class="kt">Unit</span><span class="o">)</span> <span class="k">=</span> <span class="n">identity</span><span class="o">(</span><span class="k">_</span><span class="o">))(</span><span class="n">testWithCamelSupport</span><span class="k">:</span> <span class="kt">CamelTestSupport</span> <span class="o">=&gt;</span> <span class="nc">Any</span><span class="o">){</span>
</span><span class='line'>    <span class="k">new</span> <span class="nc">CamelTestSupport</span><span class="o">{</span>
</span><span class='line'>      <span class="k">override</span> <span class="k">def</span> <span class="n">createRegistry</span> <span class="k">=</span> <span class="o">{</span>
</span><span class='line'>        <span class="k">val</span> <span class="n">registry</span> <span class="k">=</span> <span class="k">super</span><span class="o">.</span><span class="n">createRegistry</span>
</span><span class='line'>        <span class="c1">//Put entries to registry if needed.</span>
</span><span class='line'>        <span class="n">registry</span>
</span><span class='line'>      <span class="o">}</span>
</span><span class='line'>      <span class="k">override</span> <span class="k">def</span> <span class="n">createRouteBuilder</span><span class="o">()</span> <span class="k">=</span> <span class="n">routeBuilder</span>
</span><span class='line'>      <span class="n">setUp</span><span class="o">()</span>
</span><span class='line'>      <span class="n">interceptor</span><span class="o">(</span><span class="n">context</span><span class="o">)</span>
</span><span class='line'>      <span class="n">testWithCamelSupport</span><span class="o">(</span><span class="k">this</span><span class="o">)</span>
</span><span class='line'>      <span class="n">tearDown</span><span class="o">()</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>A typical way to use the trait in test would be,</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"></pre></td><td class='code'><pre><code class='scala'><span class='line'>  <span class="s">&quot;Your Route&quot;</span> <span class="n">should</span> <span class="s">&quot;do something useful&quot;</span> <span class="n">in</span> <span class="o">{</span>
</span><span class='line'>    <span class="k">val</span> <span class="n">directEndpoint</span> <span class="k">=</span> <span class="s">&quot;direct:testEndpoint&quot;</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">val</span> <span class="n">testRouteBuilder</span> <span class="k">=</span> <span class="k">new</span> <span class="nc">RouteBuilder</span> <span class="o">{</span>
</span><span class='line'>      <span class="n">from</span><span class="o">(</span><span class="s">&quot;timer:doesNotMatter&quot;</span><span class="o">).</span><span class="n">routeId</span><span class="o">(</span><span class="s">&quot;OurRoute&quot;</span><span class="o">).</span><span class="n">to</span><span class="o">(</span><span class="s">&quot;file:/some/path&quot;</span><span class="o">))</span>
</span><span class='line'>    <span class="o">}.</span><span class="n">builder</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">def</span> <span class="n">interceptor</span><span class="o">(</span><span class="n">context</span><span class="k">:</span> <span class="kt">ModelCamelContext</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>      <span class="n">context</span><span class="o">.</span><span class="n">getRouteDefinition</span><span class="o">(</span><span class="s">&quot;OurRoute&quot;</span><span class="o">).</span><span class="n">adviceWith</span><span class="o">(</span><span class="n">context</span><span class="o">,</span> <span class="k">new</span> <span class="nc">AdviceWithRouteBuilder</span> <span class="o">{</span>
</span><span class='line'>        <span class="k">def</span> <span class="n">configure</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>          <span class="n">replaceFromWith</span><span class="o">(</span><span class="n">directEndpoint</span><span class="o">)</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>      <span class="o">})</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">withCamelTestSupport</span><span class="o">(</span><span class="n">testRouteBuilder</span><span class="o">,</span> <span class="n">interceptor</span><span class="o">){</span> <span class="n">testSupport</span> <span class="k">=&gt;</span>
</span><span class='line'>        <span class="n">testSupport</span><span class="o">.</span><span class="n">template</span><span class="o">.</span><span class="n">sendBody</span><span class="o">(</span><span class="n">directEndpoint</span><span class="o">,</span> <span class="s">&quot;Some content&quot;</span><span class="o">)</span>
</span><span class='line'>        <span class="c1">//Assert files exists @ /some/path</span>
</span><span class='line'>      <span class="o">}</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>  <span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>With this style we get full flexibility about testing routes.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Integer.parseInt('God') = ???]]></title>
    <link href="http://siliconsenthil.in/blog/2013/03/26/integer-dot-parseint-god/"/>
    <updated>2013-03-26T22:47:00+05:30</updated>
    <id>http://siliconsenthil.in/blog/2013/03/26/integer-dot-parseint-god</id>
    <content type="html"><![CDATA[<p>Migrated from: <a href="http://monophilo.blogspot.in/2010/03/integerparseintgod.html">My old post</a></p>

<p>Today people visit temple for so many reasons. Fundamentally, those reasons come out of fear or greed depending on the situation. During recession people ask god to save job (out of fear) or otherwise, they ask for promotion or better job (out of greed).</p>

<!--more-->


<p>Somewhere in their mind, they understand, they can&#8217;t make all things happen. But, God is someone who can do anything. So, it&#8217;s natural to go to him ask for the they want.</p>

<p>Whenever we get anything from somebody, we wanna pay them back. It happens with God also. There are so many rituals and processes to do that. Some people are just happy with thanking him.</p>

<p>OK. When we look at the nature of these things we do with God, we can understand it&#8217;s sort of business transaction. No business transaction could happen without numbers. While we keep talking about unlimited nature of God,we tend to somehow &#8216;use&#8217; him for limited, physical things. It&#8217;s an attempt to quantify God.</p>

<p>In java, &#8216;Integer.parseInt()&#8217; is a statement used to convert string to number.</p>

<p>Integer.parseInt(&#8220;God&#8221;) is just an expression of our pathetic attempt to quantify God.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Iteration, Recursion and Tail recursion]]></title>
    <link href="http://siliconsenthil.in/blog/2013/02/15/iteration-recursion-and-tail-recursion/"/>
    <updated>2013-02-15T12:38:00+05:30</updated>
    <id>http://siliconsenthil.in/blog/2013/02/15/iteration-recursion-and-tail-recursion</id>
    <content type="html"><![CDATA[<p>Courtesy: <a href="https://class.coursera.org/progfun-2012-001/class/index">Functional Programming Principles in Scala</a></p>

<p><strong>Problem:</strong> Given <em>a</em> and <em>b</em>,<br/>find the sum of range of numbers between <em>a</em> and <em>b</em>.<br>E.g. Given 1 and 4, the result is 10 (1+2+3+4). Simple.</p>

<p><strong>Language:</strong> Scala</p>

<p>Let&#8217;s do this with programmers&#8217; favorite, Iteration</p>

<!--more-->




<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"></pre></td><td class='code'><pre><code class='scala'><span class='line'><span class="k">def</span> <span class="n">iterative_sum</span><span class="o">(</span><span class="n">a</span><span class="k">:</span> <span class="kt">Long</span><span class="o">,</span> <span class="n">b</span><span class="k">:</span> <span class="kt">Long</span><span class="o">)</span><span class="k">:</span><span class="kt">Long</span> <span class="o">=</span>  <span class="o">{</span>
</span><span class='line'>  <span class="k">var</span> <span class="n">result</span> <span class="k">=</span> <span class="mi">0L</span><span class="o">;</span>
</span><span class='line'>  <span class="k">for</span><span class="o">(</span><span class="n">i</span> <span class="k">&lt;-</span> <span class="n">a</span> <span class="n">until</span> <span class="n">b</span><span class="o">){</span><span class="n">result</span><span class="k">=</span><span class="n">result</span><span class="o">+</span><span class="n">i</span><span class="o">}</span>
</span><span class='line'>  <span class="k">return</span> <span class="n">result</span><span class="o">+</span><span class="n">b</span><span class="o">;</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>If we had to do this with recursion,</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"></pre></td><td class='code'><pre><code class='scala'><span class='line'><span class="k">def</span> <span class="n">sum</span><span class="o">(</span><span class="n">a</span><span class="k">:</span> <span class="kt">Long</span><span class="o">,</span> <span class="n">b</span><span class="k">:</span> <span class="kt">Long</span><span class="o">)</span><span class="k">:</span> <span class="kt">Long</span> <span class="o">=</span> <span class="k">if</span><span class="o">(</span><span class="n">a</span> <span class="o">&gt;</span> <span class="n">b</span><span class="o">)</span> <span class="mi">0</span> <span class="k">else</span> <span class="n">a</span> <span class="o">+</span> <span class="n">sum</span><span class="o">(</span><span class="n">a</span><span class="o">+</span><span class="mi">1</span><span class="o">,</span> <span class="n">b</span><span class="o">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>This works for smaller values. There&#8217;s a problem with this for bigger values because the way it&#8217;s implemented. If we see how it works, it would be obvious to figure that out. Assume the red grid as a limited size stack.</p>

<p><img src="http://i50.tinypic.com/1218htk.png" width="410"></p>

<p>It keeps putting expressions to stack till it could evaluate to a value.
Now, you can see it throws <em>StackOverflowError</em> for larger input.</p>

<p><img src="http://i45.tinypic.com/2mw8ry1.png" width="410"></p>

<p>This is the problem with recursion. This might be one reason programmers tend to avoid recursion as it might not be obvious to guess when it fails.</p>

<p>If we could write a recursion function that does not force to use stack then we can avoid this error. And that is called as tail recursion. The way to do is that the last line of the recursion function should be just the recursion and not something else to do with the result.</p>

<p>With the help of nested function construct in scala, we could write something like this. Here <code>loop(a+1, acc+a)</code> is the recusion call. As you can see this is the only expression, it does not require stack to store intermediate result.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"></pre></td><td class='code'><pre><code class='scala'><span class='line'><span class="k">def</span> <span class="n">tail_sum</span><span class="o">(</span><span class="n">a</span><span class="k">:</span> <span class="kt">Long</span><span class="o">,</span> <span class="n">b</span><span class="k">:</span> <span class="kt">Long</span><span class="o">)</span><span class="k">:</span> <span class="kt">Long</span> <span class="o">={</span>
</span><span class='line'>  <span class="k">def</span> <span class="n">loop</span><span class="o">(</span><span class="n">a</span><span class="k">:</span> <span class="kt">Long</span><span class="o">,</span> <span class="n">acc</span><span class="k">:</span> <span class="kt">Long</span><span class="o">)</span><span class="k">:</span> <span class="kt">Long</span> <span class="o">=</span> <span class="o">{</span>
</span><span class='line'>    <span class="k">if</span><span class="o">(</span><span class="n">a</span> <span class="o">&gt;</span> <span class="n">b</span><span class="o">)</span> <span class="n">acc</span>
</span><span class='line'>    <span class="k">else</span> <span class="n">loop</span><span class="o">(</span><span class="n">a</span><span class="o">+</span><span class="mi">1</span><span class="o">,</span> <span class="n">acc</span><span class="o">+</span><span class="n">a</span><span class="o">)</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'>  <span class="n">loop</span><span class="o">(</span><span class="n">a</span><span class="o">,</span> <span class="mi">0</span><span class="o">)</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>I tried the above all in for a large value (>6998 in my machine) and saw recursion failing while iteration and tail recursion are able to return result.</p>

<div><script src='https://gist.github.com/4959395.js?file=IterationRecursionTailRecursion.scala'></script>
<noscript><pre><code></code></pre></noscript></div>



]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Memory leaks with <i>validation_scopes</i>]]></title>
    <link href="http://siliconsenthil.in/blog/2013/01/19/validation-scopes-leaks-memory/"/>
    <updated>2013-01-19T17:50:00+05:30</updated>
    <id>http://siliconsenthil.in/blog/2013/01/19/validation-scopes-leaks-memory</id>
    <content type="html"><![CDATA[<p>We had a requirement in our app to ignore few validations by just showing warnings to user and continuing the object to save.
The gem <a href="https://github.com/gtd/validation_scopes"><em>validation_scopes</em></a> seemed to be a right choice and we used it.</p>

<p>We faced memory issues and <a href="http://siliconsenthil.in/blog/2013/01/19/how-we-debugged-rails-memory-leak/">figured out</a>
<code>model.has_warnings?</code> of <em>validation_scopes</em> was causing issue.</p>

<!--more-->


<p>Let&#8217;s take a rails model class <em>Employee</em></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"></pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">Employee</span> <span class="o">&lt;</span> <span class="ss">ActiveRecord</span><span class="p">:</span><span class="ss">:Base</span>
</span><span class='line'>  <span class="n">attr_accessible</span> <span class="ss">:address</span><span class="p">,</span> <span class="ss">:age</span><span class="p">,</span> <span class="ss">:name</span>
</span><span class='line'>  <span class="n">validates_presence_of</span> <span class="ss">:name</span>
</span><span class='line'>  <span class="n">validation_scope</span> <span class="ss">:warnings</span> <span class="k">do</span> <span class="o">|</span><span class="n">s</span><span class="o">|</span>
</span><span class='line'>    <span class="n">s</span><span class="o">.</span><span class="n">validates_presence_of</span> <span class="ss">:address</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"></pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="mi">1</span><span class="o">.</span><span class="mi">9</span><span class="o">.</span><span class="mi">3</span><span class="n">p194</span> <span class="p">:</span><span class="mo">001</span> <span class="o">&gt;</span> <span class="n">e</span> <span class="o">=</span> <span class="no">Employee</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="ss">:name</span> <span class="o">=&gt;</span> <span class="s1">&#39;Senthil V S&#39;</span><span class="p">)</span>
</span><span class='line'> <span class="o">=&gt;</span> <span class="c1">#&lt;Employee id: nil, name: &quot;Senthil V S&quot;, age: nil, address: nil, created_at: nil, updated_at: nil&gt;</span>
</span><span class='line'><span class="mi">1</span><span class="o">.</span><span class="mi">9</span><span class="o">.</span><span class="mi">3</span><span class="n">p194</span> <span class="p">:</span><span class="mo">002</span> <span class="o">&gt;</span> <span class="n">e</span><span class="o">.</span><span class="n">valid?</span>
</span><span class='line'> <span class="o">=&gt;</span> <span class="kp">true</span>
</span><span class='line'><span class="mi">1</span><span class="o">.</span><span class="mi">9</span><span class="o">.</span><span class="mi">3</span><span class="n">p194</span> <span class="p">:</span><span class="mo">003</span> <span class="o">&gt;</span> <span class="n">e</span><span class="o">.</span><span class="n">instance_variables</span>
</span><span class='line'> <span class="o">=&gt;</span> <span class="o">[</span><span class="ss">:@attributes</span><span class="p">,</span> <span class="ss">:@association_cache</span><span class="p">,</span> <span class="ss">:@aggregation_cache</span><span class="p">,</span> <span class="ss">:@attributes_cache</span><span class="p">,</span>
</span><span class='line'> <span class="ss">:@new_record</span><span class="p">,</span> <span class="ss">:@readonly</span><span class="p">,</span> <span class="ss">:@destroyed</span><span class="p">,</span> <span class="ss">:@marked_for_destruction</span><span class="p">,</span> <span class="ss">:@previously_changed</span><span class="p">,</span>
</span><span class='line'> <span class="ss">:@changed_attributes</span><span class="p">,</span> <span class="ss">:@mass_assignment_options</span><span class="p">,</span> <span class="ss">:@validation_context</span><span class="p">,</span> <span class="ss">:@errors</span><span class="o">]</span>
</span></code></pre></td></tr></table></div></figure>


<p>No problem till now. Now I call <code>has_warnings?</code> on this object.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"></pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="mi">1</span><span class="o">.</span><span class="mi">9</span><span class="o">.</span><span class="mi">3</span><span class="n">p194</span> <span class="p">:</span><span class="mo">004</span> <span class="o">&gt;</span> <span class="n">e</span><span class="o">.</span><span class="n">has_warnings?</span>
</span><span class='line'> <span class="o">=&gt;</span> <span class="kp">true</span>
</span><span class='line'><span class="mi">1</span><span class="o">.</span><span class="mi">9</span><span class="o">.</span><span class="mi">3</span><span class="n">p194</span> <span class="p">:</span><span class="mo">005</span> <span class="o">&gt;</span> <span class="n">e</span><span class="o">.</span><span class="n">instance_variables</span>
</span><span class='line'> <span class="o">=&gt;</span> <span class="o">[</span><span class="ss">:@attributes</span><span class="p">,</span> <span class="ss">:@association_cache</span><span class="p">,</span> <span class="ss">:@aggregation_cache</span><span class="p">,</span> <span class="ss">:@attributes_cache</span><span class="p">,</span>
</span><span class='line'> <span class="ss">:@new_record</span><span class="p">,</span> <span class="ss">:@readonly</span><span class="p">,</span> <span class="ss">:@destroyed</span><span class="p">,</span> <span class="ss">:@marked_for_destruction</span><span class="p">,</span> <span class="ss">:@previously_changed</span><span class="p">,</span>
</span><span class='line'> <span class="ss">:@changed_attributes</span><span class="p">,</span> <span class="ss">:@mass_assignment_options</span><span class="p">,</span> <span class="ss">:@validation_context</span><span class="p">,</span> <span class="ss">:@errors</span><span class="p">,</span> <span class="ss">:@warnings</span><span class="o">]</span>
</span></code></pre></td></tr></table></div></figure>


<p>Notice a new instance variable(<code>@warnings</code>)gets set. Let&#8217;s see what it has.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"></pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="mi">1</span><span class="o">.</span><span class="mi">9</span><span class="o">.</span><span class="mi">3</span><span class="n">p194</span> <span class="p">:</span><span class="mo">034</span> <span class="o">&gt;</span> <span class="n">warning_object</span> <span class="o">=</span> <span class="n">e</span><span class="o">.</span><span class="n">instance_variable_get</span> <span class="ss">:@warnings</span>
</span><span class='line'> <span class="o">=&gt;</span> <span class="c1">#&lt;Employee id: nil, name: &quot;Senthil V S&quot;, age: nil, address: nil, created_at: nil, updated_at: nil&gt; </span>
</span><span class='line'><span class="mi">1</span><span class="o">.</span><span class="mi">9</span><span class="o">.</span><span class="mi">3</span><span class="n">p194</span> <span class="p">:</span><span class="mo">035</span> <span class="o">&gt;</span> <span class="n">warning_object</span><span class="o">.</span><span class="n">class</span>
</span><span class='line'> <span class="o">=&gt;</span> <span class="c1">#&lt;Class:0x007ffeddb0c1e0&gt;</span>
</span><span class='line'><span class="mi">1</span><span class="o">.</span><span class="mi">9</span><span class="o">.</span><span class="mi">3</span><span class="n">p194</span> <span class="p">:</span><span class="mo">036</span> <span class="o">&gt;</span> <span class="n">warning_object</span><span class="o">.</span><span class="n">class</span><span class="o">.</span><span class="n">ancestors</span>
</span><span class='line'> <span class="o">=&gt;</span> <span class="o">[</span><span class="c1">#&lt;Class:0x007ffeddb0c1e0&gt;, ActiveModel::Validations::HelperMethods,</span>
</span><span class='line'> <span class="ss">ActiveModel</span><span class="p">:</span><span class="ss">:Validations</span><span class="p">,</span> <span class="ss">ActiveSupport</span><span class="p">:</span><span class="ss">:Callbacks</span><span class="p">,</span> <span class="c1">#&lt;Class:0x007ffeddba5f70&gt;,</span>
</span><span class='line'> <span class="no">Delegator</span><span class="p">,</span> <span class="c1">#&lt;Module:0x007ffedcb35eb0&gt;, BasicObject]  </span>
</span><span class='line'><span class="mi">1</span><span class="o">.</span><span class="mi">9</span><span class="o">.</span><span class="mi">3</span><span class="n">p194</span> <span class="p">:</span><span class="mo">037</span> <span class="o">&gt;</span> <span class="n">warning_object</span><span class="o">.</span><span class="n">__getobj__</span> <span class="o">==</span> <span class="n">e</span>
</span><span class='line'> <span class="o">=&gt;</span> <span class="kp">true</span>
</span></code></pre></td></tr></table></div></figure>


<p>What <code>@warnings</code>  has is an object of class defined during runtime by <em>DelegatorClass</em> .
The problem is that these runtime created classes don&#8217;t get garbage collected.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"></pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="mi">1</span><span class="o">.</span><span class="mi">9</span><span class="o">.</span><span class="mi">3</span><span class="n">p194</span> <span class="p">:</span><span class="mo">007</span> <span class="o">&gt;</span> <span class="n">warning_object_class_id</span> <span class="o">=</span> <span class="n">warning_object</span><span class="o">.</span><span class="n">class</span><span class="o">.</span><span class="n">object_id</span>
</span><span class='line'> <span class="o">=&gt;</span> <span class="mi">70366308884720</span>
</span><span class='line'><span class="mi">1</span><span class="o">.</span><span class="mi">9</span><span class="o">.</span><span class="mi">3</span><span class="n">p194</span> <span class="p">:</span><span class="mo">00</span><span class="mi">8</span> <span class="o">&gt;</span> <span class="n">e_object_id</span> <span class="o">=</span> <span class="n">e</span><span class="o">.</span><span class="n">object_id</span>
</span><span class='line'> <span class="o">=&gt;</span> <span class="mi">70366307844540</span>
</span></code></pre></td></tr></table></div></figure>


<p>We&#8217;ve taken the <em>object_id</em> of the model object and runtime created delegator class(which is an instance of class <em>Class</em> of course). Let&#8217;s set the references to nil and run the GC.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"></pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="mi">1</span><span class="o">.</span><span class="mi">9</span><span class="o">.</span><span class="mi">3</span><span class="n">p194</span> <span class="p">:</span><span class="mo">014</span> <span class="o">&gt;</span> <span class="nb">local_variables</span>
</span><span class='line'> <span class="o">=&gt;</span> <span class="o">[</span><span class="ss">:e_object_id</span><span class="p">,</span> <span class="ss">:warning_object_class_id</span><span class="p">,</span> <span class="ss">:warning_object</span><span class="p">,</span> <span class="ss">:e</span><span class="p">,</span> <span class="ss">:_</span><span class="o">]</span>
</span><span class='line'> <span class="mi">1</span><span class="o">.</span><span class="mi">9</span><span class="o">.</span><span class="mi">3</span><span class="n">p194</span> <span class="p">:</span><span class="mo">00</span><span class="mi">9</span> <span class="o">&gt;</span> <span class="n">warning_object</span> <span class="o">=</span> <span class="n">e</span> <span class="o">=</span> <span class="kp">nil</span>
</span><span class='line'> <span class="o">=&gt;</span> <span class="kp">nil</span>
</span><span class='line'><span class="mi">1</span><span class="o">.</span><span class="mi">9</span><span class="o">.</span><span class="mi">3</span><span class="n">p194</span> <span class="p">:</span><span class="mo">010</span> <span class="o">&gt;</span> <span class="no">GC</span><span class="o">.</span><span class="n">start</span>
</span><span class='line'> <span class="o">=&gt;</span> <span class="kp">nil</span>
</span></code></pre></td></tr></table></div></figure>


<p>Now let&#8217;s use those object_ids to check whether they get GCed.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"></pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="mi">1</span><span class="o">.</span><span class="mi">9</span><span class="o">.</span><span class="mi">3</span><span class="n">p194</span> <span class="p">:</span><span class="mo">011</span> <span class="o">&gt;</span> <span class="no">ObjectSpace</span><span class="o">.</span><span class="n">_id2ref</span> <span class="n">e_object_id</span>
</span><span class='line'><span class="ss">RangeError</span><span class="p">:</span> <span class="mh">0x003fff6ec881bc</span> <span class="n">is</span> <span class="n">recycled</span> <span class="n">object</span>
</span><span class='line'>  <span class="n">from</span> <span class="p">(</span><span class="n">irb</span><span class="p">):</span><span class="mi">11</span><span class="ss">:in</span> <span class="sb">`_id2ref&#39;</span>
</span><span class='line'><span class="sb"> from (irb):11</span>
</span><span class='line'><span class="sb"> from /Users/senthilvs/.rvm/gems/ruby-1.9.3-p194@global/gems/railties-3.2.10/lib/rails/commands/console.rb:47:in `</span><span class="n">start</span><span class="s1">&#39;</span>
</span><span class='line'><span class="s1"> from /Users/senthilvs/.rvm/gems/ruby-1.9.3-p194@global/gems/railties-3.2.10/lib/rails/commands/console.rb:8:in `start&#39;</span>
</span><span class='line'>  <span class="n">from</span> <span class="sr">/Users/sen</span><span class="n">thilvs</span><span class="o">/.</span><span class="n">rvm</span><span class="o">/</span><span class="n">gems</span><span class="o">/</span><span class="n">ruby</span><span class="o">-</span><span class="mi">1</span><span class="o">.</span><span class="mi">9</span><span class="o">.</span><span class="mi">3</span><span class="o">-</span><span class="n">p194</span><span class="vi">@global</span><span class="o">/</span><span class="n">gems</span><span class="o">/</span><span class="n">railties</span><span class="o">-</span><span class="mi">3</span><span class="o">.</span><span class="mi">2</span><span class="o">.</span><span class="mi">10</span><span class="o">/</span><span class="n">lib</span><span class="o">/</span><span class="n">rails</span><span class="o">/</span><span class="n">commands</span><span class="o">.</span><span class="n">rb</span><span class="p">:</span><span class="mi">41</span><span class="ss">:in</span> <span class="sb">`&lt;top (required)&gt;&#39;</span>
</span><span class='line'><span class="sb"> from script/rails:6:in `</span><span class="nb">require</span><span class="s1">&#39;</span>
</span><span class='line'><span class="s1"> from script/rails:6:in `&lt;main&gt;&#39;</span>
</span><span class='line'><span class="mi">1</span><span class="o">.</span><span class="mi">9</span><span class="o">.</span><span class="mi">3</span><span class="n">p194</span> <span class="p">:</span><span class="mo">012</span> <span class="o">&gt;</span> <span class="no">ObjectSpace</span><span class="o">.</span><span class="n">_id2ref</span> <span class="n">warning_object_class_id</span>
</span><span class='line'> <span class="o">=&gt;</span> <span class="c1">#&lt;Class:0x007ffeddb0c1e0&gt; </span>
</span></code></pre></td></tr></table></div></figure>


<p>So, the runtime created anonymous classes never get GCed and stay in memory. This the reason why
the memory was kept on increasing for every request.</p>

<p>We fixed it by replacing <em>validation_scopes</em> with <a href="https://github.com/paneq/activemodel-warnings"><em>activemodel-warnings</em></a>.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[How we debugged memory leak in a rails app.]]></title>
    <link href="http://siliconsenthil.in/blog/2013/01/19/how-we-debugged-rails-memory-leak/"/>
    <updated>2013-01-19T13:29:00+05:30</updated>
    <id>http://siliconsenthil.in/blog/2013/01/19/how-we-debugged-rails-memory-leak</id>
    <content type="html"><![CDATA[<p>We run our app on heroku and kept on getting <a href="https://devcenter.heroku.com/articles/error-codes#r14-memory-quota-exceeded">R14</a>s. Our google and stackoverflow skills did provide
few suggestions and but din&#8217;t help much. We used few tools (<a href="https://github.com/brynary/rack-bug">rack_bug</a>, <a href="https://github.com/noahd1/oink">oink</a>) see the memory usage. They provided who use how much <br/>
but we could make further progress with that. So here&#8217;s what we did to find out.</p>

<!--more-->


<ul>
<li>Figured out what pages create R14

<ul>
<li>Observe pattern of usage</li>
<li>Load test app with multiple usage paths. Figure out which falls soon.</li>
</ul>
</li>
</ul>


<p>This is more of finding usage patterns and making guesses. We should ascertain our guess with heavily loading the suspected page(s) and see the memory pattern. We had a page that was most frequently used. We hit it with jmeter and within in minutes it ended up with R14.</p>


<ul>
<li>Replicated the leak in local machine.

<ul>
<li>Ran the app in production environment and kept hitting the page.</li>
<li>Used <code>vmmap</code> to find out memory usage pattern. (You can use <em>smap</em> or <em>pmap</em> as well.)</li>
<li>Saw the memory usage keep on increasing and never getting stabilized.</li>
</ul>
</li>
</ul>


<p> When we start the rails app and start visiting pages, the memory goes up. It increases to certain extent and gets stable after
a while. Don&#8217;t be misguided by the initial increase in memory as memory leak. It happens for all the pages. But, it gets stable soon. For leaking pages, the memory never gets stabilized.
</p>


<ul>
<li>Drilled down and found the code that leaks.

<ul>
<li>Removed the action and view code and rendered the page and saw memory was stable. This is to ensure
the problem is with the specific page and not the framework as such.</li>
<li>Added code step-by-step in chunks and observed memory usage.</li>
<li>Figured out which chunk leaks the memory.</li>
</ul>
</li>
</ul>


<p><span> Finally, nailed down to <code>model.has_warnings?</code>.</span>
We use <a href="https://github.com/gtd/validation_scopes">validation_scopes</a> which was the cause in our case. It was creating metaclasses for validation
and those classes did not get garbage collected (<a href="http://siliconsenthil.in/blog/2013/01/19/validation-scopes-leaks-memory/">details</a>).</p>

<p>We fixed it by replacing <em>validation_scopes</em> with <a href="https://github.com/paneq/activemodel-warnings"><em>activemodel-warnings</em></a>.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Onclick link disabling with jQuery]]></title>
    <link href="http://siliconsenthil.in/blog/2011/04/15/onclick-link-disabling-with-jquery/"/>
    <updated>2011-04-15T16:07:00+05:30</updated>
    <id>http://siliconsenthil.in/blog/2011/04/15/onclick-link-disabling-with-jquery</id>
    <content type="html"><![CDATA[<p>Days back I have come across a common requirement to disable link on clicking it once. Typically, it&#8217;s because on click of those links some AJAX thins happen and some fragments of the page gets updated.</p>

<!--more-->


<p>I had those sort of links across screens and I have written Javascript using jQuery as &#8216;Unobtrusive Javascript&#8217;. All I gotta do is to add a class called &#8216;link_to_disable&#8217; to the links I wanted to disable.</p>

<iframe style="width: 100%; height: 300px; border: 1px solid black;" src="http://jsfiddle.net/FrBMz/18/embedded#result_trigger" allowfullscreen="allowfullscreen" frameborder="0"></iframe>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[If else or Switch case to Polymorphism]]></title>
    <link href="http://siliconsenthil.in/blog/2011/04/15/if-else-or-switch-case-to-polymorphism/"/>
    <updated>2011-04-15T15:59:00+05:30</updated>
    <id>http://siliconsenthil.in/blog/2011/04/15/if-else-or-switch-case-to-polymorphism</id>
    <content type="html"><![CDATA[<p>If you try to express your logic in if-else way like this,</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"></pre></td><td class='code'><pre><code class='java'><span class='line'>  <span class="kd">private</span> <span class="kd">static</span> <span class="n">String</span> <span class="nf">getSoundIfElseWay</span><span class="o">(</span><span class="n">String</span> <span class="n">animal</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>       <span class="k">if</span> <span class="o">(</span><span class="n">animal</span><span class="o">.</span><span class="na">equalsIgnoreCase</span><span class="o">(</span><span class="s">&quot;Dog&quot;</span><span class="o">))</span>
</span><span class='line'>            <span class="k">return</span> <span class="s">&quot;Bark&quot;</span><span class="o">;</span>
</span><span class='line'>       <span class="k">else</span> <span class="nf">if</span> <span class="o">(</span><span class="n">animal</span><span class="o">.</span><span class="na">equalsIgnoreCase</span><span class="o">(</span><span class="s">&quot;Cat&quot;</span><span class="o">))</span>
</span><span class='line'>            <span class="k">return</span> <span class="s">&quot;Mew&quot;</span><span class="o">;</span>
</span><span class='line'>       <span class="k">else</span> <span class="nf">if</span> <span class="o">(</span><span class="n">animal</span><span class="o">.</span><span class="na">equalsIgnoreCase</span><span class="o">(</span><span class="s">&quot;Lion&quot;</span><span class="o">))</span>
</span><span class='line'>            <span class="k">return</span> <span class="s">&quot;Roar&quot;</span><span class="o">;</span>
</span><span class='line'>       <span class="k">return</span> <span class="s">&quot;&quot;</span><span class="o">;</span>
</span><span class='line'>  <span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>then polymorphic way would be,</p>

<!--more-->


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"></pre></td><td class='code'><pre><code class='java'><span class='line'> <span class="kd">private</span> <span class="kd">static</span> <span class="n">String</span> <span class="nf">getSoundPolymorphicWay</span><span class="o">(</span><span class="n">Animal</span> <span class="n">animal</span><span class="o">){</span>
</span><span class='line'>      <span class="k">return</span> <span class="n">animal</span><span class="o">.</span><span class="na">say</span><span class="o">();</span>
</span><span class='line'> <span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"></pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">public</span> <span class="kd">abstract</span> <span class="kd">class</span> <span class="nc">Animal</span> <span class="o">{</span>
</span><span class='line'>      <span class="kd">public</span> <span class="kd">abstract</span> <span class="n">String</span> <span class="nf">say</span><span class="o">();</span>
</span><span class='line'> <span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"></pre></td><td class='code'><pre><code class='java'><span class='line'> <span class="kd">public</span> <span class="kd">class</span> <span class="nc">Dog</span> <span class="kd">extends</span> <span class="n">Animal</span><span class="o">{</span>
</span><span class='line'>      <span class="nd">@Override</span>
</span><span class='line'>      <span class="kd">public</span> <span class="n">String</span> <span class="nf">say</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>           <span class="k">return</span> <span class="s">&quot;Bark&quot;</span><span class="o">;</span>
</span><span class='line'>      <span class="o">}</span>
</span><span class='line'> <span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"></pre></td><td class='code'><pre><code class='java'><span class='line'> <span class="kd">public</span> <span class="kd">class</span> <span class="nc">Cat</span> <span class="kd">extends</span> <span class="n">Animal</span> <span class="o">{</span>
</span><span class='line'>      <span class="nd">@Override</span>
</span><span class='line'>      <span class="kd">public</span> <span class="n">String</span> <span class="nf">say</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>           <span class="k">return</span> <span class="s">&quot;Mew&quot;</span><span class="o">;</span>
</span><span class='line'>      <span class="o">}</span>
</span><span class='line'> <span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"></pre></td><td class='code'><pre><code class='java'><span class='line'> <span class="kd">public</span> <span class="kd">class</span> <span class="nc">Lion</span> <span class="kd">extends</span> <span class="n">Animal</span> <span class="o">{</span>
</span><span class='line'>      <span class="nd">@Override</span>
</span><span class='line'>      <span class="kd">public</span> <span class="n">String</span> <span class="nf">say</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>           <span class="k">return</span> <span class="s">&quot;Roar&quot;</span><span class="o">;</span>
</span><span class='line'>      <span class="o">}</span>
</span><span class='line'> <span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Look at the change in behavior based on the condition. If you could come up with a object than could take this behavior, push that to the corresponding object.</p>

<p>Same rule applies to switch-case also.</p>
]]></content>
  </entry>
  
</feed>
